package cyy_IM_protocol;

import DataManager.Group;
import DataManager.User;
import Utility.GPG;

import java.io.UnsupportedEncodingException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import javax.xml.bind.DatatypeConverter;
/**
 * this is the packet generator implementation
 * @author Ce
 */
public class CYY_PACKET_generator implements Cyy_factory {

    private Message_cyy msg;
    /**
     * @param raw_text        String: the original content for sending
     * @param Encryption_type String: the type of encryption
     * @param Sequence_number integer: the sequence number generated by a certain session for each sending
     * @param timeStamp       long: the timestamp when the message is generated
     * @param session_id      int: the id of session that this message belong to
     * @return Message_cyy for upper layer
     */
    @Override
    public Message_cyy create_messageObj(String raw_text, String Encryption_type, int Sequence_number, long timeStamp, int session_id) {
        Message_ID msg_id = new Message_ID(Sequence_number, timeStamp, session_id);

        Message_cyy msg_cyy = new Message_cyy(msg_id, Encryption_type, raw_text.length());
        String encrypted = raw_text;
        if(Encryption_type.contains(IM_Handler.ENCRYPTION_type_base)){
            encrypted = GPG.Encrypt(raw_text);
        }else{
            System.out.println("the text is not encrypted!!!");
        }
        msg_cyy.setContent(encrypted);
        this.msg = msg_cyy;
        return msg_cyy;
    }

    /**
     * @param UserAgent     String: the client edition
     * @param ACTION_type   String: the action description: could be found in static resources in  IM_Handler of cyy_IM_protocol package
     * @param mail_protocol String: mail protocol description: determined by user no influence on usage of this method
     * @param source        String: the email address of sender
     * @param Destination   String[]: the email address list of recipients
     * @param group_id      int: the group id that initiated by the organiser
     * @return IM_capsulation object of IM_packet
     */
    @Override
    public IM_capsulation capsulate(String UserAgent, String ACTION_type, String mail_protocol, String source, String[] Destination, int group_id) {
        MessageDigest md = null;
        String checksum = "";
        try {
            md =MessageDigest.getInstance("SHA-256");
            byte[] hash = md.digest(msg.getContent().getBytes("UTF-8"));
            checksum = DatatypeConverter.printHexBinary(hash).toLowerCase();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        IM_capsulation capsulation = new IM_capsulation(msg, UserAgent, ACTION_type,checksum, mail_protocol);
        capsulation.setSource(new User(source));
        if(group_id == -1){
            capsulation.setIndividual_Destination(new User(Destination[0]));
        }else {Group g = new Group(group_id);
        
            for(String dest:Destination){
                g.add_member(new User(dest));
            }
            g.setGroup_ID(group_id);
            capsulation.setGroup_Destination(g);
            capsulation.setGroup_size(Destination.length);
        }
        
        return capsulation;

    }

    /**
     * overloading with no group_id parameter
     */
    @Override
    public IM_capsulation capsulate(String UserAgent, String ACTION_type, String mail_protocol, String source, String Destination) {
        String [] dests = {Destination};
        return this.capsulate(UserAgent, ACTION_type, mail_protocol, source, dests, -1);
    }

    /**
     * @param packet_obj the IM_capsulation object
     * @return the packet in byte[] with encrypted content
     */
    @Override
    public byte[] packet_generate(IM_capsulation packet_obj) {
        IM_Handler handler = new IM_Handler();

       return handler.generate_packet(packet_obj);
    }

    /**
     * @param raw_packet the original packet coming from internet
     * @return
     */
    @Override
    public IM_capsulation packet_parse(String raw_packet) {
        IM_Handler handler = new IM_Handler();

        try {
            return handler.parse_packet(raw_packet.getBytes("UTF-8"));
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        return null;
    }
}
